How to use this template to build a performance based assessment.

Before you begin:
    - You should know how many performance-based questions you need.
    - You should have correct and incorrect answers for every question written.
    - You should know how the unit tests will operate for each question.
    - Decide on a concise short name for the package that you will use (replacing MySample).

Editing this template:
    - Rename MySample folder in this repo for your use case.
    - Edit the package of MySample.Dispatch so that it reflects the new folder name.
    - Edit the heading of MySample.Empty so that it reflects the new folder name. MySample.Empty is an example of a class file that can be provided to the user when they start the assessment. If needed, make more of these files. If needed, add some starter code to these files.

    - Edit FrontEnd/index.html so there are as many q-container divs as there are questions, with the button ids matching the testNums on the server.
    - Edit FrontEnd/index.html so that it has an appropriate title and good text displayed to the user for your use case.

    - Edit the StartUnitTest method of MySample/Dispatch.cls, so that there are as many conditionals as there are questions.
    - Edit the XYZSecretXYZ strings in the dispatch class, so that it provides the correct secret code words for each question. This class will be compiled in deployed mode which means it will not be visible to users.

    - Add or remove folders from the UnitTest folder. There should be one folder called "Q[number]" for each performance-based question in the assessment. 
    - Add a class Test.cls to each of the question folders within UnitTest. 
    - Add contents to the TestQ[Num] method of each Test class so that the unit tests are functional. Examples are provided. Typically these will be a set of assert statements about the classes which the user created. Test the unit tests with correct and incorrecft answers.

    - Edit the README.md file which contains instructions for AVL integration. 
        - For example, list out all of the Test classes which need to be put into deployed mode. 
        - Edit lines 18 and 33 which says the name of the dispatch class.
